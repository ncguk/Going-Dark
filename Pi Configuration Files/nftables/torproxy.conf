#!/usr/sbin/nft -f

flush ruleset

# ----- Define Interfaces -----
define DEV_PRIVATE = { usb0, wlan0 }
define DEV_WORLD = { 10.192.0.1 }
define NET_LOCAL = { 127.0.0.0/8 }

# ----- Global rules for localhost and client traffic -----
table inet global {

    chain inbound_world {
        # Drop ICMP echo-request (ping) from the internet
        ip protocol icmp icmp type echo-request drop

        # Drop any fragmented IP packets (which may be used for scanning).
        ip frag-off != 0 drop
    }

    chain inbound_private {
        # Allow various ICMP types (with rate limiting)
        ip protocol icmp icmp type { echo-request, echo-reply, destination-unreachable, time-exceeded, parameter-problem } limit rate 3/second accept

        # Protect SSH against brute-force attacks
        limit rate 3/minute tcp dport 8519 accept

        # Allow DHCP, DNS, HTTPS, and SSH for private networks
        ip protocol . th dport vmap {
            tcp . 6666 : accept,   # SSH
            udp . 67 : accept,     # DHCP
            udp . 68 : accept,
            udp . 123 : accept,    # NTP
            tcp . 443 : accept,    # HTTPS
            tcp . 9040 : accept,   # Tor TransPort
            udp . 5357 : accept,   # AdGuard DNS
            tcp . 5357 : accept,
            udp . 7353 : accept,   # Unbound DNS
            tcp . 7353 : accept
        }
    }

# ----- Securiy Settings and Redirection to right chain -----
    chain inbound {
        type filter hook input priority 0; policy drop;

        # Allow established/related connections and drop invalid ones
        ct state vmap { established : accept, related : accept, invalid : drop }

        # Mitigate SYN flood attacks
        limit rate 5/second burst 10 packets counter tcp flags syn accept

        # Drop NULL packets and various malformed flags
        tcp flags & (fin | syn | rst | psh | ack | urg) == 0 drop
        tcp flags & (syn|ack) == ack ct state new drop
        tcp flags & (fin | syn | rst | psh | ack | urg) == fin|syn|rst|psh|ack|urg drop

        # Direct packets to the right chain:
        # Accept all traffic arriving on lo (local traffic is handled separately in the NAT output)
        # and jump private interface traffic to inbound_private.
        iifname vmap {
            lo : accept,
            $DEV_WORLD : jump inbound_world,
            $DEV_PRIVATE : jump inbound_private
        }

        # Log all other TCP connections before rejecting them
        ip protocol tcp log prefix "nft drop: " flags all counter

        # Reject all other TCP connections with a TCP reset
        ip protocol tcp reject with tcp reset
    }

# ----- Specific Rules for localhost traffic: Redirect to AdGuardHome and Tor -----
    chain output {
        type nat hook output priority 0; policy accept;

        # Avoid interfering with Tor's own traffic
        meta skuid debian-tor return

        # Redirect DNS requests for local traffic to AdGuard (port 5357)
        ip daddr != $NET_LOCAL ip protocol udp udp dport 53 redirect to 5357
        ip daddr != $NET_LOCAL ip protocol tcp tcp dport 53 redirect to 5357

        # Redirect all other local TCP traffic to Tor’s TransPort
        ip daddr != $NET_LOCAL ip protocol tcp dnat to $DEV_WORLD:9040
    }

# ----- Specific Rules for client traffic: Redirect to AdGuardHome and Tor -----
    chain prerouting {
        type nat hook prerouting priority dstnat; policy accept;

        # Ensure local traffic to AdGuard/Nginx stays local
        ip daddr { 192.168.77.1, 192.168.37.1 } tcp dport { 80, 443 } accept

        # Redirect DNS requests for client traffic to AdGuard (port 5357)
        ip protocol udp iifname $DEV_PRIVATE udp dport 53 redirect to 5357
        ip protocol tcp iifname $DEV_PRIVATE tcp dport 53 redirect to 5357

        # Redirect all client TCP traffic (except SSH port 8519) to Tor’s TransPort
        ip protocol tcp iifname $DEV_PRIVATE tcp dport != 8519 dnat to $DEV_WORLD:9040
    }

# ----- Forwarding Rules: Allow established/related and Tor, drop traffic between interfaces -----
    chain forward {
        type filter hook forward priority 0; policy drop;

        # Allow established/related connections
        ct state vmap { established : accept, related : accept, invalid : drop }

        # Allow only traffic routed through Tor (based on UID)
        meta skuid debian-tor accept

        # Prevent direct traffic between usb0 and wlan0
        iifname usb0 oifname wlan0 drop
        iifname wlan0 oifname usb0 drop

        # Drop everything else
        drop
    }
}

# ----- IPv6: drop all traffic -----
table ip6 filter {
    chain input {
        type filter hook input priority 0; policy drop;
    }
    chain forward {
        type filter hook forward priority 0; policy drop;
    }
    chain output {
        type filter hook output priority 0; policy drop;
    }
}